Visual Studio Code (1.96.4, ssh-remote, desktop)
Jupyter Extension Version: 2024.11.0.
Python Extension Version: 2024.22.2.
Pylance Extension Version: 2024.12.1.
Platform: linux (x64).
Temp Storage folder ~/.vscode-server/data/User/globalStorage/ms-toolsai.jupyter/version-2024.11.0
Workspace folder /home/iujeong, Home = /home/iujeong
15:36:43.444 [info] Starting Kernel (Python Path: /opt/anaconda3/envs/bogdong/bin/python, Conda, 3.12.8) for '~/study/test1.ipynb' (disableUI=true)
15:36:44.822 [info] Process Execution: /opt/anaconda3/envs/bogdong/bin/python -c "import ipykernel; print(ipykernel.__version__); print("5dc3a68c-e34e-4080-9c3e-2a532b2ccb4d"); print(ipykernel.__file__)"
15:36:44.824 [info] Process Execution: /opt/anaconda3/envs/bogdong/bin/python -m ipykernel_launcher --f=/home/~/.local/share/jupyter/runtime/kernel-v312731676f6dd5c3551254ab829eac0816fa97cf6.json
    > cwd: //home/~/study
15:36:44.829 [info] Process Execution: /opt/anaconda3/envs/bogdong/bin/python -m pip list
15:36:45.077 [info] Kernel successfully started
15:36:45.080 [info] Process Execution: /opt/anaconda3/envs/bogdong/bin/python /home/~/.vscode-server/extensions/ms-toolsai.jupyter-2024.11.0-linux-x64/pythonFiles/printJupyterDataDir.py
16:17:59.903 [warn] Cell completed with errors [iu [Error]: expected ':' (1793774472.py, line 2)
	at n.execute (/home/~/.vscode-server/extensions/ms-toolsai.jupyter-2024.11.0-linux-x64/dist/extension.node.js:297:4958)] {
  ename: 'SyntaxError',
  evalue: "expected ':' (1793774472.py, line 2)",
  traceback: [
    '\x1B[0;36m  Cell \x1B[0;32mIn[7], line 2\x1B[0;36m\x1B[0m\n' +
      '\x1B[0;31m    def __init__(self, )\x1B[0m\n' +
      '\x1B[0m                        ^\x1B[0m\n' +
      "\x1B[0;31mSyntaxError\x1B[0m\x1B[0;31m:\x1B[0m expected ':'\n"
  ]
}
16:18:03.146 [info] Disposing request as the cell (-1) was deleted ~/study/test1.ipynb
16:21:53.836 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/169024768.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.154.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/169024768.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num)\n        num = in", 256)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 256 <= 255

16:21:53.897 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3355525745.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.155.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3355525745.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num)\n        num = in", 256)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 256 <= 255

16:21:54.075 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3595444965.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.156.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3595444965.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num)\n        num = int", 257)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 257 <= 256

16:22:20.610 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1048710108.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.171.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1048710108.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        n", 298)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 298 <= 297

16:22:22.769 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2467427206.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.172.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2467427206.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = i", 305)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 305 <= 304

16:23:06.665 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2409998907.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.176.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2409998907.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        ㅜㅕ", 342)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 342 <= 341

16:23:07.032 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1793664522.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.177.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1793664522.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        ㅜ", 341)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 341 <= 340

16:23:07.561 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/218166509.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.178.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/218166509.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        n", 341)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 341 <= 340

16:23:13.845 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1178678459.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.179.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1178678459.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = n", 351)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 351 <= 350

16:23:18.068 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/129500661.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.180.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/129500661.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1", 354)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 354 <= 353

16:23:19.691 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4146557856.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.181.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4146557856.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * n", 358)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 358 <= 357

16:23:28.418 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2678443869.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.182.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2678443869.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        p", 372)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 372 <= 371

16:23:29.618 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/887496521.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.183.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/887496521.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        p", 372)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 372 <= 371

16:23:32.607 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1127131600.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.184.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1127131600.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        p", 372)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 372 <= 371

16:23:34.494 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3036699828.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.185.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3036699828.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        f", 372)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 372 <= 371

16:23:38.091 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3831144478.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.186.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3831144478.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        for s", 376)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 376 <= 375

16:23:38.273 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2964674215.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.187.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2964674215.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        for su", 377)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 377 <= 376

16:23:38.566 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1615177507.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.188.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1615177507.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        for sum", 378)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 378 <= 377

16:23:42.221 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/670232082.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.189.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/670232082.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, num1, num2)\n        num1 = int(input(\"가로를 입력하세요 : \"))\n        num2 = int(input(\"세로를 입력하세요 : \"))\n\n        numbers = num1 * num2\n\n        p", 372)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 372 <= 371

16:23:49.283 [warn] Cell completed with errors [iu [Error]: expected ':' (1190189522.py, line 10)
	at n.execute (/home/~/.vscode-server/extensions/ms-toolsai.jupyter-2024.11.0-linux-x64/dist/extension.node.js:297:4958)] {
  ename: 'SyntaxError',
  evalue: "expected ':' (1190189522.py, line 10)",
  traceback: [
    '\x1B[0;36m  Cell \x1B[0;32mIn[8], line 10\x1B[0;36m\x1B[0m\n' +
      '\x1B[0;31m    def __init__(self, num1, num2)\x1B[0m\n' +
      '\x1B[0m                                  ^\x1B[0m\n' +
      "\x1B[0;31mSyntaxError\x1B[0m\x1B[0;31m:\x1B[0m expected ':'\n"
  ]
}
16:30:27.922 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3448229981.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.247.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3448229981.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nn", 428)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 428 <= 427

16:30:31.566 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1814605380.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.248.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1814605380.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nnum1 = i", 435)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 435 <= 434

16:30:43.074 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4004389555.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.252.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4004389555.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nnum1 = int(input(\"가로를 입력하세요 : \"))\nn", 462)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 462 <= 461

16:30:45.098 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3449275773.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.254.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3449275773.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nnum1 = int(input(\"가로를 입력하세요 : \"))\nnum2 = i", 469)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 469 <= 468

16:31:03.138 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2306737753.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.261.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2306737753.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nnum1 = int(input(\"가로를 입력하세요 : \"))\nnum2 = int(input(\"세로를 입력하세요 : \"))\n\nr", 497)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 497 <= 496

16:31:07.828 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1294366924.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.262.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1294366924.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nnum1 = int(input(\"가로를 입력하세요 : \"))\nnum2 = int(input(\"세로를 입력하세요 : \"))\n\nrect = R", 504)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 504 <= 503

16:31:15.889 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3623638636.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.265.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3623638636.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 1: 사각형 클래스 만들기\n# \t사각형의 **가로(width)**와 **세로(height)**를 입력받아 **넓이(area)**를 계산하는 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Rectangle.\n# \t2.\t생성자를 사용해 가로와 세로를 초기화.\n# \t3.\t넓이를 반환하는 메서드 get_area()를 작성.\n\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width   # 가로를 속성으로 저장\n        self.height = height    # 세로를 속성으로 저장\n\n    def get_area(self):\n        return self.width * self.height     # 넓이 계산\n\n# 사용자 입력\nnum1 = int(input(\"가로를 입력하세요 : \"))\nnum2 = int(input(\"세로를 입력하세요 : \"))\n\nrect = Rectangle(num1, num2)\np", 526)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 526 <= 525

16:33:51.496 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2448741647.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.272.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2448741647.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nc", 197)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 197 <= 196

16:33:54.664 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2444547835.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.273.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2444547835.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass S", 203)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 203 <= 202

16:33:59.047 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1586864909.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.275.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1586864909.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    d", 216)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 216 <= 215

16:34:04.194 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2426033446.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.276.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2426033446.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def _", 220)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 220 <= 219

16:34:06.704 [info] Too many pending requests 1 for kernel c6ab9ca0-eac7-4b8d-bd37-1efa64431657, waiting for it to be ready.
16:39:18.724 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1725948857.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.338.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1725948857.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \na", 362)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 362 <= 361

16:39:20.371 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/326693772.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.339.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/326693772.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd_", 365)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 365 <= 364

16:39:21.105 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/481298964.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.340.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/481298964.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd_s", 366)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 366 <= 365

16:39:31.098 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2346974317.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.341.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2346974317.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = i", 368)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 368 <= 367

16:39:48.078 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2819419348.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.346.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2819419348.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\nx", 399)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 399 <= 398

16:39:48.871 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3241223514.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.347.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3241223514.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\ns", 399)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 399 <= 398

16:39:58.904 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3686278976.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.348.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3686278976.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\nsc", 400)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 400 <= 399

16:39:59.143 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3424555350.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.349.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3424555350.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\ns", 399)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 399 <= 398

16:40:04.449 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/854534838.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.350.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/854534838.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\nt", 399)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 399 <= 398

16:40:05.357 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/554424421.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.351.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/554424421.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\ntota", 402)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 402 <= 401

16:40:08.832 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3182321136.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.352.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3182321136.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n\n    def add_score(self):\n        return self.score + i\n    \nadd = int(input(\"더할 점수를 입력하세요 : \"))\n\ntotal = S", 407)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 407 <= 406

16:44:33.785 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/105942330.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.447.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/105942330.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 2: 학생 클래스\n# \t•\t학생의 이름과 점수를 관리하는 클래스를 만들어서 평균 점수를 계산해라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 Student.\n# \t2.\t학생의 이름과 점수를 저장하는 속성을 포함.\n# \t3.\t점수를 추가하는 메서드 add_score().\n# \t4.\t평균 점수를 계산하는 메서드 get_average().\n\nclass Student:\n    def __init__(self, name, score):\n        self.name = name    # 학생 이름\n        self.score = score  # 초기 점수\n\n    def add_score(self, addition_score):\n        self.score += addition_score    # 입력받은 점수 더하기\n        return self.score\n    \n# 학생 이름과 초기 점수 입력받기\nname = input(\"학생의 이름을 입력하세요 : \")\ninitial_score = int(input(\"초기 점수를 입력하세요 : \"))\n\n# student 객체 생성\nstudent = Student(name, initial_score)\n\n# 추가할 점수 입력 및 계산\nadd = int(input(\"더할 점수를 입력하세요 :\"))\ntotal_score = student.add_score(add)\n    \np", 698)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 698 <= 697

16:50:14.615 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/325655941.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.508.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/325655941.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nc", 220)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 220 <= 219

16:50:18.147 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2568720689.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.509.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2568720689.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass B", 226)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 226 <= 225

16:50:18.475 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1088621094.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.510.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1088621094.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass Ba", 227)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 227 <= 226

16:50:18.600 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2262447176.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.511.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2262447176.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass Ban", 228)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 228 <= 227

16:50:19.511 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1824626035.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.512.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1824626035.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass Bank", 229)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 229 <= 228

16:50:20.326 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1820658950.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.513.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1820658950.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankS", 230)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 230 <= 229

16:50:21.229 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2840618174.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.514.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2840618174.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankA", 230)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 230 <= 229

16:50:21.645 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/427881650.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.515.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/427881650.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAc", 231)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 231 <= 230

16:50:21.803 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1508659454.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.516.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1508659454.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAcc", 232)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 232 <= 231

16:50:21.989 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/473059053.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.517.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/473059053.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAcco", 233)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 233 <= 232

16:50:22.249 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/953876613.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.518.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/953876613.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccou", 234)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 234 <= 233

16:50:22.456 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/671710250.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.519.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/671710250.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccoun", 235)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 235 <= 234

16:50:22.570 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/416861889.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.520.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/416861889.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount", 236)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 236 <= 235

16:50:24.334 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4027655405.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.521.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4027655405.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    d", 243)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 243 <= 242

16:50:27.709 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/399658257.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.522.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/399658257.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def _", 247)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 247 <= 246

16:51:52.761 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4134797455.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.544.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4134797455.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        se", 286)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 286 <= 285

16:51:53.887 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4289297471.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.545.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4289297471.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.", 289)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 289 <= 288

16:51:54.439 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1396646272.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.546.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1396646272.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.nam", 292)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 292 <= 291

16:51:54.564 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2660973711.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.547.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2660973711.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name", 293)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 293 <= 292

16:51:55.682 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2455127323.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.548.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2455127323.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = a", 297)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 297 <= 296

16:51:56.234 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/496994316.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.549.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/496994316.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = n", 297)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 297 <= 296

16:51:57.872 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/123582018.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.550.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/123582018.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        s", 310)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 310 <= 309

16:51:58.581 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1544698901.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.551.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1544698901.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.", 314)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 314 <= 313

16:51:58.733 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3449171573.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.552.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3449171573.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.", 314)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 314 <= 313

16:52:01.386 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3885711192.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.553.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3885711192.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.ba", 316)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 316 <= 315

16:52:02.063 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3208189066.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.554.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3208189066.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.bala", 318)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 318 <= 317

16:52:02.224 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2689673431.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.555.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2689673431.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.balan", 319)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 319 <= 318

16:52:03.051 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/846634479.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.556.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/846634479.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.balanc", 320)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 320 <= 319

16:52:03.269 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/748262243.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.557.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/748262243.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance)\n        self.name = name\n        self.balancd", 321)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 321 <= 320

16:52:14.819 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1920065686.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.558.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1920065686.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance", 322)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 322 <= 321

16:52:17.968 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2637098342.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.559.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2637098342.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = b", 326)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 326 <= 325

16:52:44.831 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/501049240.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.561.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/501049240.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def d", 343)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 343 <= 342

16:52:46.459 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2476028837.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.562.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2476028837.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def depo", 346)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 346 <= 345

16:52:46.841 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1088617583.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.563.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1088617583.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def depot", 347)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 347 <= 346

16:52:48.775 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3612908467.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.564.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3612908467.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def depos", 347)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 347 <= 346

16:52:48.969 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1742446219.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.565.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1742446219.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposi", 348)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 348 <= 347

16:52:49.124 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4181535706.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.566.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4181535706.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit", 349)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 349 <= 348

16:53:50.323 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/510558323.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.587.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/510558323.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount)\n        s", 381)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 381 <= 380

16:53:52.102 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2110645511.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.588.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2110645511.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount)\n        self.", 385)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 385 <= 384

16:53:59.750 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1934977898.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.589.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1934977898.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount)\n        self.balance += d", 397)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 397 <= 396

16:54:08.209 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4270255078.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.590.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4270255078.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += depos", 402)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 402 <= 401

16:54:14.333 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3114044147.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.591.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3114044147.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        r", 421)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 421 <= 420

16:54:16.921 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3077521231.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.592.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3077521231.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return s", 428)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 428 <= 427

16:54:17.610 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/959388451.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.593.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/959388451.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.", 432)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 432 <= 431

16:54:19.078 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/21532244.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.595.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/21532244.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.", 432)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 432 <= 431

16:54:21.117 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1551610089.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.596.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1551610089.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.s", 433)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 433 <= 432

16:54:24.925 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1815051625.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.597.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1815051625.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.b", 433)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 433 <= 432

16:54:27.931 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3439695314.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.598.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3439695314.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    d", 450)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 450 <= 449

16:54:30.961 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2109129238.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.599.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2109129238.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def w", 454)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 454 <= 453

16:54:31.080 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/32699424.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.600.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/32699424.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def wi", 455)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 455 <= 454

16:54:31.234 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1264556834.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.601.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1264556834.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def wit", 456)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 456 <= 455

16:54:31.386 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/303585518.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.602.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/303585518.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def with", 457)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 457 <= 456

16:54:35.094 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3935933297.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.603.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3935933297.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdr", 459)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 459 <= 458

16:54:35.929 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3625482523.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.604.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3625482523.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdra", 460)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 460 <= 459

16:54:36.377 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3593510815.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.605.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3593510815.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw", 461)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 461 <= 460

16:54:54.093 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2840640197.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.628.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2840640197.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        d", 495)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 495 <= 494

16:54:55.060 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/528741560.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.629.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/528741560.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        s", 495)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 495 <= 494

16:54:55.756 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2359023290.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.630.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2359023290.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.", 499)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 499 <= 498

16:55:02.701 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/355713674.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.631.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/355713674.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= w", 511)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 511 <= 510

16:55:06.274 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/790667670.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.632.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/790667670.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        r", 535)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 535 <= 534

16:55:07.810 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3682036533.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.633.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3682036533.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return s", 542)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 542 <= 541

16:55:09.157 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1471940451.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.634.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1471940451.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.", 546)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 546 <= 545

16:55:20.686 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3648817750.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.635.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3648817750.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nn", 560)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 560 <= 559

16:55:42.403 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1809508653.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.638.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1809508653.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ni", 572)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 572 <= 571

16:55:47.093 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3585459622.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.639.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3585459622.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_b", 580)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 580 <= 579

16:55:48.072 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/500595219.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.640.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/500595219.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_ba", 581)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 581 <= 580

16:55:48.344 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1178427701.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.641.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1178427701.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_bal", 582)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 582 <= 581

16:55:48.845 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1410147275.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.642.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1410147275.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_bala", 583)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 583 <= 582

16:55:49.169 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2120206849.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.643.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2120206849.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balac", 584)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 584 <= 583

16:55:49.823 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1870823812.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.644.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1870823812.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balan", 584)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 584 <= 583

16:55:50.013 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3632761307.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.645.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3632761307.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balanc", 585)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 585 <= 584

16:55:50.263 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/379114864.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.646.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/379114864.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance", 586)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 586 <= 585

16:55:53.988 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/437581474.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.647.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/437581474.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = i", 590)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 590 <= 589

16:56:43.222 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1810641978.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.656.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1810641978.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\nt", 597)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 597 <= 596

16:56:49.639 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/207746972.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.657.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/207746972.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_b", 603)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 603 <= 602

16:56:50.844 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/360627495.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.658.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/360627495.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_ba", 604)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 604 <= 603

16:56:51.010 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1969872469.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.659.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1969872469.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_bal", 605)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 605 <= 604

16:56:51.355 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2558908758.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.660.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2558908758.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_bala", 606)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 606 <= 605

16:56:51.476 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/683859257.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.661.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/683859257.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_balan", 607)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 607 <= 606

16:56:51.790 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2497381223.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.662.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2497381223.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_balanc", 608)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 608 <= 607

16:56:52.102 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1141955271.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.663.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1141955271.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\ntotal_balance", 609)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 609 <= 608

16:57:22.766 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/105321889.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.666.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/105321889.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namou", 601)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 601 <= 600

16:57:24.238 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1594020736.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.667.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1594020736.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namoun", 602)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 602 <= 601

16:57:24.466 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/245096632.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.668.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/245096632.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount", 603)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 603 <= 602

16:57:30.489 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1821290372.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.669.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1821290372.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = S", 607)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 607 <= 606

16:57:32.417 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1658299368.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.670.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1658299368.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = B", 607)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 607 <= 606

16:57:46.564 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3000457274.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.673.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3000457274.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\na", 643)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 643 <= 642

16:57:48.334 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4162773312.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.674.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4162773312.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = i", 649)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 649 <= 648

16:58:01.716 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2292092242.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.675.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2292092242.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\na", 643)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 643 <= 642

16:58:05.966 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/345507261.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.676.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/345507261.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\naccount = i", 653)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 653 <= 652

16:58:06.046 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3447001777.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.677.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3447001777.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\naccount = i", 653)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 653 <= 652

16:58:54.359 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/159191730.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.683.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/159191730.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nf", 680)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 680 <= 679

16:58:57.205 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/837514077.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.684.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/837514077.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = i", 687)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 687 <= 686

16:59:16.568 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1846896085.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.688.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1846896085.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\nt", 718)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 718 <= 717

16:59:21.615 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2624003967.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.689.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2624003967.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_b", 724)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 724 <= 723

16:59:22.624 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1734686889.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.690.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1734686889.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_ba", 725)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 725 <= 724

16:59:22.981 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4157251814.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.691.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4157251814.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_bal", 726)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 726 <= 725

16:59:23.152 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1194368429.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.692.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1194368429.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_bala", 727)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 727 <= 726

16:59:24.033 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3579760780.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.693.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3579760780.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balac", 728)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 728 <= 727

16:59:24.368 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2082756939.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.694.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2082756939.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace", 729)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 729 <= 728

16:59:41.427 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1287075541.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.695.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1287075541.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace =a", 732)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 732 <= 731

16:59:43.371 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3256325437.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.696.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3256325437.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace =amount.", 738)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 738 <= 737

17:00:05.924 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1218111185.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.697.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1218111185.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace = a", 733)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 733 <= 732

17:00:09.041 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2486269075.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.698.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2486269075.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace = amount.", 739)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 739 <= 738

17:00:24.359 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1780417503.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.702.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1780417503.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace1 = amount.deposit(add)\nt", 754)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 754 <= 753

17:00:28.227 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1189534388.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.703.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1189534388.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balace1 = amount.deposit(add)\ntotal_balan", 764)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 764 <= 763

17:00:33.871 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3579392760.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.704.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3579392760.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balance1 = amount.deposit(add)\ntotal_balanc", 766)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 766 <= 765

17:00:37.009 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1949976018.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.705.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1949976018.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balance1 = amount.deposit(add)\ntotal_balance2 = a", 772)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 772 <= 771

17:00:38.733 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1754097123.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.706.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1754097123.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balance1 = amount.deposit(add)\ntotal_balance2 = amount.", 778)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 778 <= 777

17:00:47.935 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1471525835.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.708.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1471525835.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount\n        return self.balance\n    \n    def withdraw(self, withdraw_amount):\n        self.balance -= withdraw_amount\n        return self.balance\n    \nname = \"유정\"\ninitial_balance = \"$100\"\n\namount = BankAccount(name, initial_balance)\n\nadd = int(input(\"입금할 금액을 입력하세요 : \"))\nfall = int(input(\"출금할 금액을 입력하세요 : \"))\ntotal_balance1 = amount.deposit(add)\ntotal_balance2 = amount.withdraw(fall)\n\np", 795)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 795 <= 794

17:01:41.376 [warn] Cell completed with errors [iu [Error]: can only concatenate str (not "int") to str
	at n.execute (/home/~/.vscode-server/extensions/ms-toolsai.jupyter-2024.11.0-linux-x64/dist/extension.node.js:297:4958)] {
  ename: 'TypeError',
  evalue: 'can only concatenate str (not "int") to str',
  traceback: [
    '\x1B[0;31m---------------------------------------------------------------------------\x1B[0m',
    '\x1B[0;31mTypeError\x1B[0m                                 Traceback (most recent call last)',
    'Cell \x1B[0;32mIn[12], line 30\x1B[0m\n' +
      '\x1B[1;32m     28\x1B[0m add \x1B[38;5;241m=\x1B[39m \x1B[38;5;28mint\x1B[39m(\x1B[38;5;28minput\x1B[39m(\x1B[38;5;124m"\x1B[39m\x1B[38;5;124m입금할 금액을 입력하세요 : \x1B[39m\x1B[38;5;124m"\x1B[39m))\n' +
      '\x1B[1;32m     29\x1B[0m fall \x1B[38;5;241m=\x1B[39m \x1B[38;5;28mint\x1B[39m(\x1B[38;5;28minput\x1B[39m(\x1B[38;5;124m"\x1B[39m\x1B[38;5;124m출금할 금액을 입력하세요 : \x1B[39m\x1B[38;5;124m"\x1B[39m))\n' +
      '\x1B[0;32m---> 30\x1B[0m total_balance1 \x1B[38;5;241m=\x1B[39m amount\x1B[38;5;241m.\x1B[39mdeposit(add)\n' +
      '\x1B[1;32m     31\x1B[0m total_balance2 \x1B[38;5;241m=\x1B[39m amount\x1B[38;5;241m.\x1B[39mwithdraw(fall)\n' +
      '\x1B[1;32m     32\x1B[0m total \x1B[38;5;241m=\x1B[39m total_balance1 \x1B[38;5;241m+\x1B[39m total_balance2\n',
    'Cell \x1B[0;32mIn[12], line 16\x1B[0m, in \x1B[0;36mBankAccount.deposit\x1B[0;34m(self, deposit_amount)\x1B[0m\n' +
      '\x1B[1;32m     15\x1B[0m \x1B[38;5;28;01mdef\x1B[39;00m \x1B[38;5;21mdeposit\x1B[39m(\x1B[38;5;28mself\x1B[39m, deposit_amount):\n' +
      '\x1B[0;32m---> 16\x1B[0m     \x1B[38;5;28mself\x1B[39m\x1B[38;5;241m.\x1B[39mbalance \x1B[38;5;241m+\x1B[39m\x1B[38;5;241m=\x1B[39m deposit_amount\n' +
      '\x1B[1;32m     17\x1B[0m     \x1B[38;5;28;01mreturn\x1B[39;00m \x1B[38;5;28mself\x1B[39m\x1B[38;5;241m.\x1B[39mbalance\n',
    '\x1B[0;31mTypeError\x1B[0m: can only concatenate str (not "int") to str'
  ]
}
17:05:40.212 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/495401123.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.725.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/495401123.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nc", 936)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 936 <= 935

17:05:42.182 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2295439278.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.726.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2295439278.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass b", 942)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 942 <= 941

17:05:43.187 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1491531023.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.727.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1491531023.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass B", 942)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 942 <= 941

17:05:43.649 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2256135265.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.728.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2256135265.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass Ba", 943)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 943 <= 942

17:05:44.000 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/480491010.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.729.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/480491010.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass Ban", 944)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 944 <= 943

17:05:45.424 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3417346907.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.730.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3417346907.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass Bank", 945)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 945 <= 944

17:05:46.061 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/653208810.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.731.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/653208810.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankA", 946)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 946 <= 945

17:05:46.524 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/285062178.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.732.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/285062178.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAc", 947)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 947 <= 946

17:05:46.677 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4055414847.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.733.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4055414847.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAcc", 948)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 948 <= 947

17:05:46.810 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/996997311.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.734.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/996997311.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAcco", 949)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 949 <= 948

17:05:47.750 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/773348989.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.735.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/773348989.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccou", 950)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 950 <= 949

17:05:47.936 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3651371831.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.736.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3651371831.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccoun", 951)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 951 <= 950

17:05:48.079 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/685973481.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.737.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/685973481.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount", 952)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 952 <= 951

17:05:49.797 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1512662181.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.738.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1512662181.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    d", 959)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 959 <= 958

17:05:50.715 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2669000437.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.739.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2669000437.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def _", 963)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 963 <= 962

17:06:03.419 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2380493420.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.762.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2380493420.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        s", 1002)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1002 <= 1001

17:06:04.642 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3560561483.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.763.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3560561483.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.", 1006)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1006 <= 1005

17:06:05.139 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/21073539.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.764.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/21073539.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self. n", 1008)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1008 <= 1007

17:06:08.827 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/746905374.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.766.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/746905374.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = n", 1014)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1014 <= 1013

17:06:12.619 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2439246897.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.768.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2439246897.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.ba", 1033)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1033 <= 1032

17:06:13.313 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/51702390.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.769.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/51702390.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.bal", 1034)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1034 <= 1033

17:06:13.454 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2889026172.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.770.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2889026172.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.bala", 1035)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1035 <= 1034

17:06:13.674 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1087204171.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.771.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1087204171.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balan", 1036)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1036 <= 1035

17:06:15.980 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1750765589.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.773.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1750765589.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = bl", 1043)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1043 <= 1042

17:06:16.091 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2895126837.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.774.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2895126837.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = b", 1042)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1042 <= 1041

17:06:16.148 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4112705817.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.775.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4112705817.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = b", 1042)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1042 <= 1041

17:06:20.726 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4130992322.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.776.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4130992322.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    d", 1059)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1059 <= 1058

17:06:20.884 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1442305570.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.777.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1442305570.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    d", 1059)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1059 <= 1058

17:06:22.613 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1479656835.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.778.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1479656835.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    def d", 1063)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1063 <= 1062

17:06:24.668 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/300380678.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.779.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/300380678.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    def depo", 1066)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1066 <= 1065

17:06:25.690 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2094625896.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.780.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2094625896.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    def depos", 1067)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1067 <= 1066

17:06:25.908 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1989679627.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.781.result": do_implementation()}, raw=True)
                                                                     ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1989679627.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\nclass BankAccount:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n    \n    def deposit", 1069)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 1069 <= 1068

17:12:52.165 [warn] Cell completed with errors [iu [Error]: can only concatenate tuple (not "int") to tuple
	at n.execute (/home/~/.vscode-server/extensions/ms-toolsai.jupyter-2024.11.0-linux-x64/dist/extension.node.js:297:4958)] {
  ename: 'TypeError',
  evalue: 'can only concatenate tuple (not "int") to tuple',
  traceback: [
    '\x1B[0;31m---------------------------------------------------------------------------\x1B[0m',
    '\x1B[0;31mTypeError\x1B[0m                                 Traceback (most recent call last)',
    'Cell \x1B[0;32mIn[14], line 67\x1B[0m\n' +
      '\x1B[1;32m     65\x1B[0m \x1B[38;5;66;03m# 입금 및 출금 처리\x1B[39;00m\n' +
      '\x1B[1;32m     66\x1B[0m add \x1B[38;5;241m=\x1B[39m \x1B[38;5;28mint\x1B[39m(\x1B[38;5;28minput\x1B[39m(\x1B[38;5;124m"\x1B[39m\x1B[38;5;124m입금할 금액을 입력하세요 : \x1B[39m\x1B[38;5;124m"\x1B[39m))\n' +
      '\x1B[0;32m---> 67\x1B[0m account\x1B[38;5;241m.\x1B[39mdeposit(add)\n' +
      '\x1B[1;32m     69\x1B[0m fall \x1B[38;5;241m=\x1B[39m \x1B[38;5;28mint\x1B[39m(\x1B[38;5;28minput\x1B[39m(\x1B[38;5;124m"\x1B[39m\x1B[38;5;124m출금할 금액을 입력하세요 : \x1B[39m\x1B[38;5;124m"\x1B[39m))\n' +
      '\x1B[1;32m     70\x1B[0m account\x1B[38;5;241m.\x1B[39mwithdraw(fall)\n',
    'Cell \x1B[0;32mIn[14], line 46\x1B[0m, in \x1B[0;36mBankAccount.deposit\x1B[0;34m(self, deposit_amount)\x1B[0m\n' +
      '\x1B[1;32m     45\x1B[0m \x1B[38;5;28;01mdef\x1B[39;00m \x1B[38;5;21mdeposit\x1B[39m(\x1B[38;5;28mself\x1B[39m, deposit_amount):\n' +
      '\x1B[0;32m---> 46\x1B[0m     \x1B[38;5;28mself\x1B[39m\x1B[38;5;241m.\x1B[39mbalance \x1B[38;5;241m+\x1B[39m\x1B[38;5;241m=\x1B[39m deposit_amount  \x1B[38;5;66;03m# 입금\x1B[39;00m\n' +
      '\x1B[1;32m     47\x1B[0m     \x1B[38;5;28mprint\x1B[39m(\x1B[38;5;124mf\x1B[39m\x1B[38;5;124m"\x1B[39m\x1B[38;5;132;01m{\x1B[39;00mdeposit_amount\x1B[38;5;132;01m}\x1B[39;00m\x1B[38;5;124m원이 입금되었습니다. 현재 잔액 : \x1B[39m\x1B[38;5;132;01m{\x1B[39;00m\x1B[38;5;28mself\x1B[39m\x1B[38;5;241m.\x1B[39mbalance\x1B[38;5;132;01m}\x1B[39;00m\x1B[38;5;124m원\x1B[39m\x1B[38;5;124m"\x1B[39m)\n' +
      '\x1B[1;32m     48\x1B[0m     \x1B[38;5;28;01mreturn\x1B[39;00m \x1B[38;5;28mself\x1B[39m\x1B[38;5;241m.\x1B[39mbalance\n',
    '\x1B[0;31mTypeError\x1B[0m: can only concatenate tuple (not "int") to tuple'
  ]
}
17:13:08.806 [warn] Cell completed with errors [iu [Error]: invalid literal for int() with base 10: ''
	at n.execute (/home/~/.vscode-server/extensions/ms-toolsai.jupyter-2024.11.0-linux-x64/dist/extension.node.js:297:4958)] {
  ename: 'ValueError',
  evalue: "invalid literal for int() with base 10: ''",
  traceback: [
    '\x1B[0;31m---------------------------------------------------------------------------\x1B[0m',
    '\x1B[0;31mValueError\x1B[0m                                Traceback (most recent call last)',
    'Cell \x1B[0;32mIn[15], line 69\x1B[0m\n' +
      '\x1B[1;32m     66\x1B[0m add \x1B[38;5;241m=\x1B[39m \x1B[38;5;28mint\x1B[39m(\x1B[38;5;28minput\x1B[39m(\x1B[38;5;124m"\x1B[39m\x1B[38;5;124m입금할 금액을 입력하세요 : \x1B[39m\x1B[38;5;124m"\x1B[39m))\n' +
      '\x1B[1;32m     67\x1B[0m account\x1B[38;5;241m.\x1B[39mdeposit(add)\n' +
      '\x1B[0;32m---> 69\x1B[0m fall \x1B[38;5;241m=\x1B[39m \x1B[38;5;28mint\x1B[39m(\x1B[38;5;28minput\x1B[39m(\x1B[38;5;124m"\x1B[39m\x1B[38;5;124m출금할 금액을 입력하세요 : \x1B[39m\x1B[38;5;124m"\x1B[39m))\n' +
      '\x1B[1;32m     70\x1B[0m account\x1B[38;5;241m.\x1B[39mwithdraw(fall)\n' +
      '\x1B[1;32m     72\x1B[0m \x1B[38;5;66;03m# 최종 잔액 출력\x1B[39;00m\n',
    "\x1B[0;31mValueError\x1B[0m: invalid literal for int() with base 10: ''"
  ]
}
17:21:46.416 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3585104617.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1128.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3585104617.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    p", 2765)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2765 <= 2764

17:21:46.509 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/851254172.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1129.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/851254172.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    p", 2765)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2765 <= 2764

17:22:06.507 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3438706106.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1143.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3438706106.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    p", 2803)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2803 <= 2802

17:22:16.182 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2684532501.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1148.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2684532501.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    c", 2823)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2823 <= 2822

17:22:19.604 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/304044444.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1149.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/304044444.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = i", 2832)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2832 <= 2831

17:22:29.581 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4070680002.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1152.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4070680002.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    i", 2867)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2867 <= 2866

17:22:31.275 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/919358387.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1153.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/919358387.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if c", 2870)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2870 <= 2869

17:22:49.994 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/641902425.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1156.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/641902425.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        a", 2903)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2903 <= 2902

17:22:50.493 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3872767254.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1157.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3872767254.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        d", 2903)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2903 <= 2902

17:22:52.886 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1688678334.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1158.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1688678334.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        depos", 2907)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2907 <= 2906

17:22:53.116 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1506069559.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1159.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1506069559.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit", 2909)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2909 <= 2908

17:22:54.655 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1049481404.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1160.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1049481404.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_", 2910)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2910 <= 2909

17:22:57.353 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/558042037.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1162.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/558042037.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_am", 2912)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2912 <= 2911

17:22:57.883 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1609000430.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1163.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1609000430.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amo", 2913)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2913 <= 2912

17:22:58.068 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3154604966.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1164.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3154604966.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amou", 2914)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2914 <= 2913

17:22:58.414 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/306949118.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1165.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/306949118.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amoun", 2915)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2915 <= 2914

17:22:58.638 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/742217724.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1166.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/742217724.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount", 2916)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2916 <= 2915

17:23:00.378 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3661420017.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1167.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3661420017.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = i", 2920)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2920 <= 2919

17:23:19.386 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1208793448.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1175.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1208793448.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        a", 2959)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2959 <= 2958

17:23:26.454 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3945317010.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1176.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3945317010.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.", 2966)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2966 <= 2965

17:23:34.762 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3471074268.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1178.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3471074268.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    d", 2997)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2997 <= 2996

17:23:35.855 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3886084134.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1179.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3886084134.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    d", 2997)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2997 <= 2996

17:23:36.092 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/449324295.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1180.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/449324295.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    e", 2997)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2997 <= 2996

17:23:40.050 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4172206532.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1181.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4172206532.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif c", 3002)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3002 <= 3001

17:23:59.402 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1058427507.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1184.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1058427507.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        w", 3037)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3037 <= 3036

17:24:01.861 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1991516847.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1185.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1991516847.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        wht", 3039)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3039 <= 3038

17:24:03.746 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2328540257.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1186.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2328540257.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        w", 3037)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3037 <= 3036

17:24:04.147 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1936788926.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1187.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1936788926.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        whti", 3040)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3040 <= 3039

17:24:04.442 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3175145113.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1188.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3175145113.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        whtie", 3041)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3041 <= 3040

17:24:10.182 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1243865064.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1190.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1243865064.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw", 3044)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3044 <= 3043

17:24:12.159 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3820677909.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1191.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3820677909.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_", 3045)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3045 <= 3044

17:24:12.302 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2998077712.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1192.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2998077712.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_a", 3046)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3046 <= 3045

17:24:13.195 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4119211681.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1193.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4119211681.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_am", 3047)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3047 <= 3046

17:24:13.362 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2499967277.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1194.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2499967277.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amo", 3048)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3048 <= 3047

17:24:15.994 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1338737807.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1196.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1338737807.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = i", 3055)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3055 <= 3054

17:24:28.463 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1943500804.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1204.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1943500804.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n        a", 3094)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3094 <= 3093

17:24:29.819 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2375133748.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1205.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2375133748.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n        account.", 3101)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3101 <= 3100

17:24:35.244 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4103223370.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1206.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4103223370.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n        account.withdraq", 3109)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3109 <= 3108

17:24:35.345 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3025598747.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1207.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3025598747.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n        account.withdraq", 3109)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3109 <= 3108

17:24:35.764 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2209978473.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1208.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2209978473.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n        account.withdra", 3108)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3108 <= 3107

17:24:38.647 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2249571746.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1209.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2249571746.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraq(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    if choice == \"1\":   # 입금 선택\n        deposit_amount = int(input(\"입금할 금액을 입력하세요 : \"))\n        account.deposit(deposit_amount=)\n\n    elif choice == \"2\":     # 출금 선택\n        withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n        account.withdraw", 3109)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3109 <= 3108

17:26:07.086 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2747730692.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1213.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2747730692.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    m", 2867)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2867 <= 2866

17:26:09.213 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1452089252.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1214.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1452089252.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match c", 2873)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2873 <= 2872

17:27:13.408 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2764656617.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1215.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2764656617.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    ㅡㅁ", 2868)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2868 <= 2867

17:27:13.697 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1214295533.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1216.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1214295533.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    ㅡ", 2867)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2867 <= 2866

17:27:14.369 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4109818372.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1217.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4109818372.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    m", 2867)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2867 <= 2866

17:27:18.087 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4114363481.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1218.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4114363481.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match c", 2873)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2873 <= 2872

17:27:24.349 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/758912558.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1219.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/758912558.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        c", 2889)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2889 <= 2888

17:27:29.066 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3629748366.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1222.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3629748366.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            d", 2911)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2911 <= 2910

17:27:33.105 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/560397311.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1224.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/560397311.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_", 2918)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2918 <= 2917

17:27:36.464 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2211580684.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1226.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2211580684.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = i", 2928)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2928 <= 2927

17:27:50.196 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1451062462.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1231.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1451062462.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.", 2978)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 2978 <= 2977

17:28:04.009 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/460580385.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1233.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/460580385.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        c", 3012)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3012 <= 3011

17:28:09.387 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4049076002.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1236.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4049076002.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            w", 3034)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3034 <= 3033

17:28:11.151 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/4155069572.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1237.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/4155069572.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdr", 3039)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3039 <= 3038

17:28:11.763 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1137970381.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1238.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1137970381.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdra", 3040)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3040 <= 3039

17:28:12.147 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3197392339.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1239.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3197392339.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraq", 3041)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3041 <= 3040

17:28:15.063 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/901433832.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1241.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/901433832.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_ac", 3044)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3044 <= 3043

17:28:15.221 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1492096049.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1242.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1492096049.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_acc", 3045)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3045 <= 3044

17:28:18.262 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3280962690.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1243.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3280962690.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_am", 3044)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3044 <= 3043

17:28:18.377 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2508662194.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1244.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2508662194.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amo", 3045)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3045 <= 3044

17:28:18.573 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2364809066.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1245.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2364809066.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amou", 3046)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3046 <= 3045

17:28:18.776 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/217036413.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1246.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/217036413.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amoun", 3047)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3047 <= 3046

17:28:18.924 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/950955448.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1247.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/950955448.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount", 3048)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3048 <= 3047

17:28:21.138 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3856870937.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1248.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3856870937.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = i", 3052)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3052 <= 3051

17:28:29.781 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3365862947.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1252.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3365862947.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            a", 3095)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3095 <= 3094

17:28:31.689 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1713358245.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1253.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1713358245.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.", 3102)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3102 <= 3101

17:28:44.019 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2426045011.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1255.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2426045011.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.withdraw(withdraw_amount)\n\n        c", 3138)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3138 <= 3137

17:28:48.380 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/175698316.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1258.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/175698316.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.withdraw(withdraw_amount)\n\n        case \"3\":\n            p", 3160)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3160 <= 3159

17:29:22.804 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/1620601084.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1272.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/1620601084.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.withdraw(withdraw_amount)\n\n        case \"3\":\n            print(f\"{account.name}님의 계좌를 종료합니다. 최종 잔액은 {account.balance}원 입니다.\")\n            b", 3241)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3241 <= 3240

17:29:25.371 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/3232501292.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1273.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/3232501292.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.withdraw(withdraw_amount)\n\n        case \"3\":\n            print(f\"{account.name}님의 계좌를 종료합니다. 최종 잔액은 {account.balance}원 입니다.\")\n            break\n\n        c", 3256)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3256 <= 3255

17:29:27.873 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/781091031.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1274.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/781091031.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.withdraw(withdraw_amount)\n\n        case \"3\":\n            print(f\"{account.name}님의 계좌를 종료합니다. 최종 잔액은 {account.balance}원 입니다.\")\n            break\n\n        case _", 3261)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3261 <= 3260

17:29:29.962 [warn] Error in background execution:
 Traceback (most recent call last):
  File "/tmp/ipykernel_2043955/2972658918.py", line 17, in bg_main
    output.update({"application/vnd.vscode.bg.execution.1275.result": do_implementation()}, raw=True)
                                                                      ^^^^^^^^^^^^^^^^^^^
  File "/tmp/ipykernel_2043955/2972658918.py", line 13, in do_implementation
    return get_ipython().kernel.do_complete("# 🔹 문제 3: 은행 계좌 클래스\n# \t•\t사용자가 돈을 입금하거나 출금할 수 있는 은행 계좌 클래스를 만들어라.\n\n# 요구사항:\n# \t1.\t클래스 이름은 BankAccount.\n# \t2.\t계좌의 잔액을 저장하는 속성을 포함.\n# \t3.\t입금 메서드 deposit(amount), 출금 메서드 withdraw(amount).\n# \t4.\t잔액을 확인하는 메서드 get_balance().\n\n\n# 내가 짠 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name\n#         self.balance = balance\n\n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         self.balance -= withdraw_amount\n#         return self.balance\n    \n# name = \"유정\"\n# initial_balance = 100\n\n# amount = BankAccount(name, initial_balance)\n\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# total_balance1 = amount.deposit(add)\n# total_balance2 = amount.withdraw(fall)\n# total = total_balance1 + total_balance2\n\n# print(f\"{name}님의 계좌의 금액은 {total}입니다.\")\n\n\n# 챗gpt가 짜준 코드\n# class BankAccount:\n#     def __init__(self, name, balance):\n#         self.name = name    # 계좌 소유자 이름\n#         self.balance = balance  # 초기 잔액\n    \n#     def deposit(self, deposit_amount):\n#         self.balance += deposit_amount  # 입금\n#         print(f\"{deposit_amount}원이 입금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n#     def withdraw(self, withdraw_amount):\n#         if withdraw_amount > self.balance:   # 잔액 부족 시 처리\n#             print(\"잔액이 부족하여 출금할 수 없습니다.\")\n#         else:\n#             self.balance -= withdraw_amount     # 출금\n#             print(f\"{withdraw_amount}원이 출금되었습니다. 현재 잔액 : {self.balance}원\")\n#         return self.balance\n    \n# # 초기 값 설정\n# name = \"유정\"\n# initial_balance = 10000    # 초기 잔액은 숫자로 설정해야 함\n\n# # BankAccount 객체 생성\n# account = BankAccount(name, initial_balance)\n\n# # 입금 및 출금 처리\n# add = int(input(\"입금할 금액을 입력하세요 : \"))\n# account.deposit(add)\n\n# fall = int(input(\"출금할 금액을 입력하세요 : \"))\n# account.withdraw(fall)\n\n# # 최종 잔액 출력\n# print(f\"{name}님의 계좌의 최종 잔액은 {account.balance}원 입니다.\")\n\n\n\n\n# ++ 추가 (입/출금 선택 가능)\nclass Bankaccount:\n    def __init__(self, name, balance):\n        self.name = name    # 계좌 소유자 이름\n        self.balance = balance      # 초기 잔액\n\n    def deposit(self, deposit_amount):\n        self.balance += deposit_amount      # 입금\n        print(f\"{deposit_amount}원 입금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n    def withdraw(self, withdraw_amount):\n        if withdraw_amount > self.balance:      # 잔액 부족 시 처리\n            print(\"잔액이 부족하여 출금을 할 수 없습니다.\")\n\n        else:\n            self.balance -= withdraw_amount     # 출금\n            print(f\"{withdraw_amount}원 출금되었습니다. 현재 잔액 : {self.balance}원 입니다.\")\n\n# 초기값 설정\nname = \"유정\"\ninitial_balance = 100\n\n# BankAccount 객체 생성\naccount = Bankaccount(name, initial_balance)\n\n# 메뉴 시스템 (입금/출금/종료)\nwhile True:\n    print(\"\\n메뉴선택 : \")\n    print(\"1. 입금\")\n    print(\"2. 출금\")\n    print(\"3. 종료\")\n\n    choice = input(\"원하는 작업의 번호를 입력하세요 : \")\n\n    match choice:\n        case \"1\":\n            deposit_amount = int(input(\"입력할 금액을 입력하세요 : \"))\n            account.deposit(deposit_amount)\n\n        case \"2\":\n            withdraw_amount = int(input(\"출금할 금액을 입력하세요 : \"))\n            account.withdraw(withdraw_amount)\n\n        case \"3\":\n            print(f\"{account.name}님의 계좌를 종료합니다. 최종 잔액은 {account.balance}원 입니다.\")\n            break\n\n        case _:\n            p", 3276)

  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 509, in do_complete
    return self._experimental_do_complete(code, cursor_pos)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/ipykernel/ipkernel.py", line 545, in _experimental_do_complete
    completions = list(_rectify_completions(code, raw_completions))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 886, in rectify_completions
    completions = list(completions)
                  ^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2871, in completions
    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 2917, in _completions
    cursor_line, cursor_column = position_to_cursor(full_text, offset)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/bogdong/lib/python3.12/site-packages/IPython/core/completer.py", line 1525, in position_to_cursor
    assert 0 <= offset <= len(text) , "0 <= %s <= %s" % (offset , len(text))
           ^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: 0 <= 3276 <= 3275

22:25:44.569 [info] Dispose Kernel '~/study/test1.ipynb' associated with '~/study/test1.ipynb'
